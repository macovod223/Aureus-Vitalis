@* Views/Education/FinalExam.cshtml *@
@model ExamModel
@{
    ViewData["Title"] = "Final Exam";
    // передаём в JS общее число вопросов
    var totalQuestions = Model.Questions.Count;
}

<div class="exam-area">
    <div class="exam-header">
        <h1>Финальный экзамен</h1>
        <div class="timer" id="timer">
            Оставшееся время: <span id="timeLeft">30:00</span>
        </div>
    </div>

    <form id="examForm">
        @for (int i = 0; i < Model.Questions.Count; i++)
        {
            var q = Model.Questions[i];
            <div class="question-block" data-question="@(i+1)" style="display: none;">
                <h3>Вопрос @(i+1)</h3>
                <p>@q.Question</p>
                <div class="options">
                    @if (q.CorrectAnswer.Contains(";"))
                    {
                        @* Множественный выбор *@
                        foreach (var opt in q.Options)
                        {
                            <label class="option">
                                <input type="checkbox"
                                       name="question_@(i+1)"
                                       value="@opt" />
                                <span>@opt</span>
                            </label>
                        }
                    }
                    else
                    {
                        @* Одиночный выбор *@
                        foreach (var opt in q.Options)
                        {
                            <label class="option">
                                <input type="radio"
                                       name="question_@(i+1)"
                                       value="@opt" />
                                <span>@opt</span>
                            </label>
                        }
                    }
                </div>
            </div>
        }

        <div class="exam-navigation">
            <button type="button" class="nav-button" id="prevBtn">Назад</button>
            <div class="question-indicators">
                @for (int i = 1; i <= totalQuestions; i++)
                {
                    <span class="indicator" data-question="@i" onclick="goToQuestion(@i)"></span>
                }
            </div>
            <button type="button" class="nav-button" id="nextBtn">Далее</button>
        </div>

        <button type="submit" class="submit-button" disabled>Завершить экзамен</button>
    </form>
</div>

@section Scripts {
<script>
    (() => {
        const totalQ = @totalQuestions;
        let currentQuestion = 1;
        let timeLeft = 30 * 60; // сек

        // === Timer ===
        function startTimer() {
            const interval = setInterval(() => {
                if (--timeLeft <= 0) {
                    clearInterval(interval);
                    submitExam();
                }
                const m = Math.floor(timeLeft / 60),
                      s = timeLeft % 60;
                document.getElementById('timeLeft').textContent =
                    `${m}:${s.toString().padStart(2,'0')}`;
            }, 1000);
        }

        // === Navigation ===
        function showQuestion(idx) {
            document.querySelectorAll('.question-block')
                    .forEach(b => b.style.display = 'none');
            document.querySelector(`.question-block[data-question="${idx}"]`)
                    .style.display = 'block';
            updateNavButtons();
            updateIndicators();
        }
        window.goToQuestion = idx => {
            currentQuestion = idx;
            showQuestion(idx);
        };

        document.getElementById('prevBtn').onclick = () => {
            if (currentQuestion > 1) {
                currentQuestion--;
                showQuestion(currentQuestion);
            }
        };
        document.getElementById('nextBtn').onclick = () => {
            if (currentQuestion < totalQ) {
                currentQuestion++;
                showQuestion(currentQuestion);
            }
        };

        function updateNavButtons() {
            document.getElementById('prevBtn').disabled = currentQuestion === 1;
            document.getElementById('nextBtn').disabled = currentQuestion === totalQ;
        }

        function isAnswered(qNum) {
            return document.querySelectorAll(
                `[name="question_${qNum}"]:checked`
            ).length > 0;
        }

        function updateIndicators() {
            document.querySelectorAll('.indicator').forEach((el,ix) => {
                const qn = ix+1;
                el.classList.toggle('current', qn===currentQuestion);
                el.classList.toggle('answered', isAnswered(qn));
            });
        }

        // === Enable submit when all answered ===
        document.getElementById('examForm').addEventListener('change', () => {
            const all = Array.from({length: totalQ},(_,i)=>i+1)
                             .every(isAnswered);
            document.querySelector('.submit-button').disabled = !all;
            updateIndicators();
        });

        // === Submit via AJAX ===
        document.getElementById('examForm').addEventListener('submit', e => {
            e.preventDefault();
            submitExam();
        });
        function submitExam() {
            const fd = new FormData(document.getElementById('examForm'));
            const payload = {};
            fd.forEach((v,k) => {
                if (!payload[k]) payload[k]=[];
                payload[k].push(v);
            });
            // привести массивы к строке через ";"
            const answers = Object.entries(payload).map(([k,arr]) => ({
                questionKey: k,
                selected:    arr.join(';')
            }));
            fetch('/Education/SubmitFinalExam', {
                method: 'POST',
                headers:{ 'Content-Type':'application/json' },
                body: JSON.stringify(answers)
            })
            .then(r=>r.json())
            .then(res=> renderResult(res));
        }

        function renderResult(res) {
            document.querySelector('.exam-area').innerHTML = `
                <div class="exam-results">
                  <h2>Результаты финального экзамена</h2>
                  <p>Правильно: ${res.correctAnswers}/${res.totalQuestions}</p>
                  <p>Процент: ${res.percentage}%</p>
                  <p>${res.passed
                      ? 'Поздравляем! Теперь вы можете получить сертификат.'
                      : 'Не пройдено. Попробуйте ещё раз.'}
                  </p>
                  <button onclick="location.href='/Education/Main'" class="nav-button">
                    Вернуться к обучению
                  </button>
                </div>`;
        }

        // === Initialization ===
        showQuestion(1);
        startTimer();
    })();
</script>
}

<style>
  /* Перекрасим Daily helper */ 
  header .daily-helper-link span {
    color: var(--brand-color);
  }
</style>