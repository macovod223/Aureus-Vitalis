@* Views/Education/NutritionPractice.cshtml *@
@model PracticeModel
@{
    ViewData["Title"] = "Nutrition Practice";
    Layout = "~/Views/Education/_EducationLayout.cshtml";
}

<div id="view-loaded-flag" style="display:none">NUTRITION PRACTICE VIEW</div>

<div class="practice-area">
  <h1>@Model.Title</h1>
  <div class="practice-task">
    @foreach (var task in Model.Tasks)
    {
      <div class="task-item" data-task-id="@task.Question">
        <h3>@task.Question</h3>
        <div class="task-options">
          @foreach (var option in task.Options)
          {
            <div class="option">@option</div>
          }
        </div>
        <div class="explanation hidden">
          @task.Explanation
        </div>
      </div>
    }
  </div>

  <div class="navigation-buttons">
    <button id="checkBtn" type="button" class="nav-button check-button" disabled>Проверить</button>
    <button id="nextBtn"  type="button" class="nav-button next-button" disabled>Далее</button>
  </div>
</div>

@section Scripts {
  <style>
  .explanation {
    border-left: 4px solid transparent;
    background: #f9f9f9;
    padding: .75rem 1rem;
    transition: border-color .2s, background .2s;
  }
  .explanation.correct {
    border-color: #28a745;      /* зелёная полоска */
    background: #e6f4ea;        /* светло-зелёный фон */
  }
  .explanation.wrong {
    border-color: #dc3545;      /* красная полоска */
    background: #f8d7da;        /* светло-красный фон */
  }

  .option.correct,
  .option.incorrect {

    background: transparent;
    border-color: #ddd;
  }
</style>
<script>
document.addEventListener('DOMContentLoaded', () => {
  console.log('NutritionPractice script loaded');
  const totalTasks = @Model.Tasks.Count;
  const checkBtn   = document.getElementById('checkBtn');
  const nextBtn    = document.getElementById('nextBtn');
  let   selectedAnswers = {};

  document.querySelectorAll('.explanation').forEach(e =>
    e.dataset.orig = e.textContent.trim()
  );

  document.querySelectorAll('.option').forEach(el => {
    el.addEventListener('click', () => {
      document.querySelectorAll('.option').forEach(o =>
        o.classList.remove('selected','correct','incorrect')
      );
      document.querySelectorAll('.explanation').forEach(e =>
        e.classList.add('hidden')
      );
      nextBtn.disabled  = true;

      const taskItem = el.closest('.task-item');
      el.classList.add('selected');
      selectedAnswers[taskItem.dataset.taskId] = el.textContent.trim();

      if (Object.keys(selectedAnswers).length === totalTasks) {
        console.log('all answered, enabling Check');
        checkBtn.disabled = false;
      }
    });
  });

  checkBtn.addEventListener('click', () => {
    console.log('Check pressed, payload=', selectedAnswers);
    checkBtn.disabled = true;
    fetch('/Education/CheckPracticeAnswers', {
      method : 'POST',
      headers: { 'Content-Type': 'application/json' },
      body   : JSON.stringify(selectedAnswers)
    })
    .then(r => r.json())
      .then(results => {
        let allCorrect = true;
        document.querySelectorAll('.task-item').forEach(taskEl => {
          const id      = taskEl.dataset.taskId;
          const explain = taskEl.querySelector('.explanation');
          const picked  = taskEl.querySelector('.option.selected');
          
          explain.classList.remove('correct','wrong');

          if (results[id]) {
            picked.classList.add('correct');
            explain.textContent = explain.dataset.orig;  
            explain.classList.add('correct');
          } else {
            picked.classList.add('incorrect');
            explain.textContent = 'Неправильно, попробуйте еще раз';
            explain.classList.add('wrong');
            picked.classList.remove('selected');
            delete selectedAnswers[id];
            allCorrect = false;
          }
          explain.classList.remove('hidden');
        });

        if (allCorrect) {
          nextBtn.disabled = false;
        } else {
          checkBtn.disabled = !(Object.keys(selectedAnswers).length === totalTasks);
        }
    })
    .catch(err => {
      console.error('CheckPracticeAnswers failed', err);
      checkBtn.disabled = false;
    });
  });

  nextBtn.addEventListener('click', () => {
    console.log('Next pressed, navigating');
    window.location.href = '/Education/NutritionTest';
  });
});
</script>
}

@section Sidebar {
    <div class="lessons-list">
        <div class="lesson-item">
            <span class="lesson-number">1</span>
            <span class="lesson-title">Питание</span>
        </div>
        <div class="lesson-item @(ViewContext.RouteData.Values["action"].ToString() == "Nutrition" ? "active" : "")" data-url="/Education/Nutrition">
            <span class="lesson-number">1.1</span>
            <span class="lesson-title">Питание. Теория</span>
        </div>
        <div class="lesson-item @(ViewContext.RouteData.Values["action"].ToString() == "NutritionPractice" ? "active" : "")" data-url="/Education/NutritionPractice">
            <span class="lesson-number">1.2</span>
            <span class="lesson-title">Питание. Практика</span>
        </div>
        <div class="lesson-item @(ViewContext.RouteData.Values["action"].ToString() == "NutritionTest" ? "active" : "")" data-url="/Education/NutritionTest">
            <span class="lesson-number">1.3</span>
            <span class="lesson-title">Питание. Тест</span>
        </div>
    </div>
}